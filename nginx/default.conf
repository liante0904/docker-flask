server {
    # HTTP 요청 처리 (80번 포트)
    listen 80;
    server_name ssh-oci.duckdns.org;

    # HTTP 요청을 HTTPS로 리다이렉트
    return 301 https://$host$request_uri;
}

server {
    # HTTPS 요청 처리 (443번 포트)
    listen 443 ssl;
    server_name ssh-oci.duckdns.org;

    # SSL 인증서 경로 설정 (Let's Encrypt 인증서 사용)
    ssl_certificate /etc/letsencrypt/live/ssh-oci.duckdns.org/fullchain.pem; # 인증서 파일 경로
    ssl_certificate_key /etc/letsencrypt/live/ssh-oci.duckdns.org/privkey.pem; # 인증서 키 경로

    # SSL 보안 설정 (최신 TLS 버전과 안전한 암호화 알고리즘만 허용)
    ssl_protocols TLSv1.2 TLSv1.3; # TLS 버전 제한
    ssl_prefer_server_ciphers on; # 서버 암호화 우선
    ssl_ciphers HIGH:!aNULL:!MD5; # 안전한 암호화 알고리즘만 허용

    # 로그 파일 설정 (선택 사항)
    access_log /var/log/nginx/ssh-oci-access.log; # 액세스 로그
    error_log /var/log/nginx/ssh-oci-error.log;   # 에러 로그

    # Gzip 압축 설정 (클라이언트 전송 데이터 크기 감소)
    gzip on; # Gzip 압축 활성화
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # 압축할 파일 형식
    gzip_min_length 1024; # 압축할 최소 파일 크기 (1KB 이상만 압축)
    gzip_comp_level 5; # 압축 수준 (1~9, 5는 적당히 빠르고 효율적)
    gzip_vary on; # 클라이언트의 `Accept-Encoding` 헤더에 따라 압축 설정

    # Flask 또는 다른 백엔드 서버로 요청 프록시
    location / {
        proxy_pass http://flask:5000; # Flask 애플리케이션 컨테이너와 포트
        proxy_set_header Host $host; # 요청의 원래 호스트 헤더 전달
        proxy_set_header X-Real-IP $remote_addr; # 클라이언트 IP 전달
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시 경유 IP 전달
        proxy_set_header X-Forwarded-Proto $scheme; # HTTP/HTTPS 스킴 전달

        proxy_cache my_cache;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # 정적 파일 제공 설정
    location /static/ {
        root /app; # Flask 애플리케이션에서 static 폴더가 위치한 경로
        expires 7d; # 캐시 만료 기간 (7일)
        add_header Cache-Control "public"; # 정적 파일을 캐싱 가능하도록 설정
    }
}
